// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: denommetadata/gov_permissoned_addresses.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UpdateAllowedAddressesProposal is a proposal for updating the list of allowed addresses allowed to modify denom metadata
type UpdateAllowedAddressesProposal struct {
	Title            string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AllowedAddresses []string `protobuf:"bytes,3,rep,name=allowedAddresses,proto3" json:"allowedAddresses,omitempty" yaml:"allowed_addresses"`
}

func (m *UpdateAllowedAddressesProposal) Reset()      { *m = UpdateAllowedAddressesProposal{} }
func (*UpdateAllowedAddressesProposal) ProtoMessage() {}
func (*UpdateAllowedAddressesProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa3ddce2c8c4a9f8, []int{0}
}
func (m *UpdateAllowedAddressesProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAllowedAddressesProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAllowedAddressesProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAllowedAddressesProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAllowedAddressesProposal.Merge(m, src)
}
func (m *UpdateAllowedAddressesProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAllowedAddressesProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAllowedAddressesProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAllowedAddressesProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateAllowedAddressesProposal)(nil), "dymensionxyz.dymension.denommetadata.UpdateAllowedAddressesProposal")
}

func init() {
	proto.RegisterFile("denommetadata/gov_permissoned_addresses.proto", fileDescriptor_aa3ddce2c8c4a9f8)
}

var fileDescriptor_aa3ddce2c8c4a9f8 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0x49, 0xcd, 0xcb,
	0xcf, 0xcd, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0xd4, 0x4f, 0xcf, 0x2f, 0x8b, 0x2f, 0x48,
	0x2d, 0xca, 0xcd, 0x2c, 0x2e, 0xce, 0xcf, 0x4b, 0x4d, 0x89, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d,
	0x2e, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x49, 0xa9, 0xcc, 0x4d, 0xcd,
	0x2b, 0xce, 0xcc, 0xcf, 0xab, 0xa8, 0xac, 0xd2, 0x83, 0x73, 0xf4, 0x50, 0x4c, 0x91, 0x12, 0x49,
	0xcf, 0x4f, 0xcf, 0x07, 0x6b, 0xd0, 0x07, 0xb1, 0x20, 0x7a, 0x95, 0xd6, 0x30, 0x72, 0xc9, 0x85,
	0x16, 0xa4, 0x24, 0x96, 0xa4, 0x3a, 0xe6, 0xe4, 0xe4, 0x97, 0xa7, 0xa6, 0x38, 0xc2, 0x0c, 0x0f,
	0x28, 0xca, 0x2f, 0xc8, 0x2f, 0x4e, 0xcc, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0xc9, 0x2c, 0xc9, 0x49,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x14, 0xb8, 0xb8, 0x53, 0x52, 0x8b,
	0x93, 0x8b, 0x32, 0x0b, 0x4a, 0x32, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0x72, 0xc8, 0x42, 0x42, 0x1e,
	0x5c, 0x02, 0x89, 0x68, 0x66, 0x4a, 0x30, 0x2b, 0x30, 0x6b, 0x70, 0x3a, 0xc9, 0x7c, 0xba, 0x27,
	0x2f, 0x51, 0x99, 0x98, 0x9b, 0x63, 0xa5, 0x04, 0x55, 0x81, 0xf0, 0x93, 0x52, 0x10, 0x86, 0x2e,
	0x2b, 0x8e, 0x8e, 0x05, 0xf2, 0x0c, 0x33, 0x16, 0xc8, 0x33, 0x38, 0x85, 0x9e, 0x78, 0x24, 0xc7,
	0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c,
	0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x75, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72,
	0x7e, 0xae, 0x3e, 0x72, 0x78, 0x20, 0x38, 0xba, 0x45, 0x29, 0xd9, 0xfa, 0x15, 0xfa, 0xa8, 0x61,
	0x5b, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x0c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0x34, 0x55, 0xee, 0x79, 0x01, 0x00, 0x00,
}

func (m *UpdateAllowedAddressesProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAllowedAddressesProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAllowedAddressesProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedAddresses) > 0 {
		for iNdEx := len(m.AllowedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAddresses[iNdEx])
			copy(dAtA[i:], m.AllowedAddresses[iNdEx])
			i = encodeVarintGovPermissonedAddresses(dAtA, i, uint64(len(m.AllowedAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGovPermissonedAddresses(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGovPermissonedAddresses(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGovPermissonedAddresses(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovPermissonedAddresses(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateAllowedAddressesProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGovPermissonedAddresses(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGovPermissonedAddresses(uint64(l))
	}
	if len(m.AllowedAddresses) > 0 {
		for _, s := range m.AllowedAddresses {
			l = len(s)
			n += 1 + l + sovGovPermissonedAddresses(uint64(l))
		}
	}
	return n
}

func sovGovPermissonedAddresses(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovPermissonedAddresses(x uint64) (n int) {
	return sovGovPermissonedAddresses(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateAllowedAddressesProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovPermissonedAddresses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAllowedAddressesProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAllowedAddressesProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovPermissonedAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovPermissonedAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovPermissonedAddresses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAddresses = append(m.AllowedAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovPermissonedAddresses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovPermissonedAddresses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovPermissonedAddresses(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovPermissonedAddresses
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovPermissonedAddresses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovPermissonedAddresses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovPermissonedAddresses
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovPermissonedAddresses
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovPermissonedAddresses
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovPermissonedAddresses        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovPermissonedAddresses          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovPermissonedAddresses = fmt.Errorf("proto: unexpected end of group")
)
